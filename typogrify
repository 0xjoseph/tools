#!/bin/bash
usage(){
	fmt <<EOF
DESCRIPTION
	Apply some scriptable typography rules from the Standard Ebooks typography manual to a Standard Ebook source directory.

USAGE
	typogrify [-v,--verbose] [-nq,--no-quotes] DIRECTORY [DIRECTORY...]
		DIRECTORY is the source directory, which must contain DIRECTORY/src/.
		If called with the --no-quotes option, don't convert to smart quotes before doing other adjustments.
EOF
	exit
}
die(){ printf "Error: ${1}\n" 1>&2; exit 1; }
require(){ command -v $1 > /dev/null 2>&1 || { suggestion=""; if [ ! -z "$2" ]; then suggestion=" $2"; fi; die "$1 is not installed.${suggestion}"; } }
if [ $# -eq 1 ]; then if [ "$1" = "--help" -o "$1" = "-h" ]; then usage; fi fi
#End boilerplate

if [ $# -eq 0 ]; then
	usage
fi

# This script relies on readers implementing the Unicode line-break algorithm, with some small modifications.
# The algorithm is here: http://www.unicode.org/reports/tr14/#Dictionary
# UAX #14 is not very well written and is often unclear for beginners.  Table 2 is helpful. Additional enlightenment might be found here: https://www.cs.tut.fi/~jkorpela/unicode/linebr.html
# You can find the line break class of arbitrary Unicode characters here: http://unicode.org/cldr/utility/character.jsp
# Notes:
# -Quotation marks and thin/hair spaces shouldn't break according to the standard.  They are QU x BA.
# -Likewise ellipses and thin/hair spaces also shouldn't break: IN x BA
# - <a-z0-9,quote>[NB]<hairsp>[NB]<ellip>[NB]<hairsp>[NB]<.,!,?>
# - <a-z0-9,quote>[NB]<ellip>[NB]<period>
# Standard Ebooks exceptions:
# -Don't break before an em-dash or double-em-dash
# -Don't break before or after an en-dash
# -Don't break after some abbreviations (Mr., Mrs., etc; see regex below for full list)

require "recode" "Try: apt-get install recode"
require "xml2asc" "Try: apt-get install html-xml-utils"

scriptDir="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
smartypantsPath="${scriptDir}/smartypants.pl"
type="file"
verbose="false"
runSmartypants="true"
dirs=""

#Some convenience aliases
wj="\xE2\x81\xA0" #word joiner, U+2060
hairsp="\xE2\x80\x8A" #thin space, U+2009
nbsp=" " #no-break space, U+00A0

while [ $# -gt 0 ]
do
	case $1 in
		-v|--verbose)
			verbose="true"
		;;
		-nq|--no-quotes)
			runSmartypants="false"
		;;
		*)
			dirs=$(printf "%s\n%s" "${dirs}" "$1")
		;;
	esac
	shift
done

if [ "${verbose}" = "true" ]; then
	if [ "${runSmartypants}" != "true" ]; then
		printf "Skipping smart quotes ...\n"
	fi
fi

printf "%s\n" "${dirs}" | while IFS= read -r i;
do
	if [ "${i}" = "" ]; then
		continue
	fi

	srcDir="$(realpath "${i%/}")"

	if [ ! -d "${srcDir}/src" ]; then
		die "${srcDir} doesn't look like a Standard Ebook source directory."
	fi

	if [ "${verbose}" = "true" ]; then
		printf "Typogrifying %s ...\n" "${srcDir}"
	fi

	for file in $(find "${srcDir}" -name "*htm*")
	do
		#Skip symlinked files
		if [ -h "${file}" ]; then
			if [ "${verbose}" = "true" ]; then
				printf "\t%s is a symlink, skipping ... OK\n" "${file}"
			fi
			continue
		fi

		if [ "${verbose}" = "true" ]; then
			printf "\tTypogrifying %s ..." "${file}"
		fi

		#Some Gutenberg works have a weird single quote style: `this is a quote'.  Clean that up here before running Smartypants.
		sed --in-place --regexp-extended "s/\`/\'/g" "${file}"

		#Prettify quotes
		if [ "${runSmartypants}" = "true" ]; then
			"${smartypantsPath}" "${file}" | xml2asc | recode HTML | sed "s/&/&amp;/g" > "${file}.tmp";
			mv "${file}.tmp" "${file}"
		fi


		sed --in-place --regexp-extended "
		#Replace sequential em dashes with the two or three em dash character
		s/———/⸻/ig
		s/——/⸺/ig

		#Smartypants doesn't do well on em dashes followed by open quotes. Fix that here
		s/—”([a-z])/—“\1/ig
		s/—’([a-z])/—‘\1/ig
		s/-“<\/p>/—”<\/p>/ig

		#Remove spaces between en and em dashes
		#Note that we match at least one character before the dashes, so that we don't catch start-of-line em dashes like in poetry.
		#Sed doesn't seem to think tabs are whitespace?
		s/([^\.[:space:]	])\s*([–—])\s*/\1\2/ig

		#First, remove stray word joiners
		s/${wj}//ig

		#Some older texts use the ,— construct; remove that archaichism
		s/,—/—/ig

		#Em dashes and two-em-dashes can be broken before, so add a word joiner between letters/punctuation and the following em dash
		s/([^[:space:]${wj}])([—⸻])/\1${wj}\2/ig

		#Add a word joiner on both sides of en dashes
		s/${wj}?–${wj}?/${wj}–${wj}/ig

		#Remove word joiners from following opening tags--they're usually never correct
		s/<([a-z]+)([^>]*?)>${wj}/<\1\2>/ig

		#Finally fix some other mistakes
		s/⁠—-/⁠—/ig

		#Replace Mr., Mrs., and other abbreviations, and include a non-breaking space
		s/([^a-z]+)Mr\.?\s+/\1Mr.${nbsp}/g
		s/<abbr>Mr\.?<\/abbr>\s+/<abbr>Mr.<\/abbr>${nbsp}/g

		s/([^a-z]+)Mrs\.?\s+/\1Mrs.${nbsp}/g
		s/<abbr>Mrs\.?<\/abbr>\s+/<abbr>Mrs.<\/abbr>${nbsp}/g

		s/([^a-z]+)Ms\.?\s+/\1Ms.${nbsp}/g
		s/<abbr>Ms\.?<\/abbr>\s+/<abbr>Ms.<\/abbr>${nbsp}/g

		s/([^a-z]+)Dr\.?\s+/\1Dr.${nbsp}/g
		s/<abbr>Dr\.?<\/abbr>\s+/<abbr>Dr.<\/abbr>${nbsp}/g

		s/([^a-z]+)Drs\.?\s+/\1Drs.${nbsp}/g
		s/<abbr>Drs\.?<\/abbr>\s+/<abbr>Drs.<\/abbr>${nbsp}/g

		s/([^a-z]+)Prof\.?\s+/\1Prof.${nbsp}/g
		s/<abbr>Prof\.?<\/abbr>\s+/<abbr>Prof.<\/abbr>${nbsp}/g

		s/([^a-z]+)Lieut\.?\s+/\1Lieut.${nbsp}/g
		s/<abbr>Lieut\.?<\/abbr>\s+/<abbr>Lieut.<\/abbr>${nbsp}/g

		s/([^a-z]+)Fr\.?\s+/\1Fr.${nbsp}/g
		s/<abbr>Fr\.?<\/abbr>\s+/<abbr>Fr.<\/abbr>${nbsp}/g

		s/([^a-z]+)Lt\.?\s+/\1Lt.${nbsp}/g
		s/<abbr>Lt\.?<\/abbr>\s+/<abbr>Lt.<\/abbr>${nbsp}/g

		s/([^a-z]+)Capt\.?\s+/\1Capt.${nbsp}/g
		s/<abbr>Capt\.?<\/abbr>\s+/<abbr>Capt.<\/abbr>${nbsp}/g

		s/([^a-z]+)Pvt\.?\s+/\1Pvt.${nbsp}/g
		s/<abbr>Pvt\.?<\/abbr>\s+/<abbr>Pvt.<\/abbr>${nbsp}/g

		s/([^a-z]+)Esq\.?\s+/\1Esq.${nbsp}/g
		s/<abbr>Esq\.?<\/abbr>\s+/<abbr>Esq.<\/abbr>${nbsp}/g

		s/([^a-z]+)Mt\.?\s+/\1Mt.${nbsp}/g
		s/<abbr>Mt\.?<\/abbr>\s+/<abbr>Mt.<\/abbr>${nbsp}/g

		s/([^a-z]+)MM\.?\s+/\1MM.${nbsp}/g
		s/<abbr>MM\.?<\/abbr>\s+/<abbr>MM.<\/abbr>${nbsp}/g

		s/([^a-z]+)Mme\.?\s+/\1Mme.${nbsp}/g
		s/<abbr>Mme\.?<\/abbr>\s+/<abbr>Mme.<\/abbr>${nbsp}/g

		s/([^a-z]+)Mmes\.?\s+/\1Mmes.${nbsp}/g
		s/<abbr>Mmes\.?<\/abbr>\s+/<abbr>Mmes.<\/abbr>${nbsp}/g

		s/([^a-z]+)Mlle\.?\s+/\1Mlle.${nbsp}/g
		s/<abbr>Mlle\.?<\/abbr>\s+/<abbr>Mlle.<\/abbr>${nbsp}/g

		s/([^a-z]+)Mlles\.?\s+/\1Mlles.${nbsp}/g
		s/<abbr>Mlles\.?<\/abbr>\s+/<abbr>Mlles.<\/abbr>${nbsp}/g

		s/([^a-z]+)Mme\.?\s+/\1Mme.${nbsp}/g
		s/<abbr>Mme\.?<\/abbr>\s+/<abbr>Mme.<\/abbr>${nbsp}/g

		s/(\b)No\.\s+([0-9]+)/\1No.${nbsp}\2/g
		s/<abbr>No\.<\/abbr>\s+/<abbr>No.<\/abbr>${nbsp}/g

		s/([0-9]+)\s<abbr/\1${nbsp}<abbr/g

		#A note on spacing:
		#					ibooks	kindle (mobi7)
		#thin space U+2009:			yes	yes
		#word joiner U+2060:			no	yes
		#zero-width no-break space U+FEFF:	yes	yes
		#narrow no-break space U+202F:		no	yes
		#punctuation space U+2008:		yes	yes

		#Fix common abbreviatons
		s/(\s)‘a’(\s)/\1’a’\2/ig

		#Years
		s/‘([0-9]+[^a-zA-Z0-9’])/’\1/ig

		s/‘([Mm]idst|[Gg]ainst|[Nn]eath|[Ee]m|[Cc]os|[Tt]is|[Tt]was|[Tt]wixt|[Tt]were|[Tt]would|[Tt]wouldn|[Tt]ween|[Tt]will)(\b)/’\1\2/g

		#House style: remove spacing from common Latinisms
		s/([Ii])\.\s+e\./\1.e./g
		s/([Ee])\.\s+g\./\1.g./g

		#WARNING! This and below can remove the ending period of a sentence, if AD or BC is the last word!  We need interactive S&R for this
		s/([\d[:space:]])A\.\s+D\./\1AD/g
		s/B\.\s+C\./BC/g

		#Put spacing next to close quotes
		s/“[[:space:]${nbsp}]*‘/“${hairsp}‘/ig
		s/’[[:space:]${nbsp}]*”/’${hairsp}”/ig
		s/“[[:space:]${nbsp}]*’/“${hairsp}’/ig
		s/‘[[:space:]${nbsp}]*“/‘${hairsp}“/ig

		#We require a non-letter char at the end, otherwise we might match a contraction: “Hello,” ’e said.
		s/”[[:space:]${nbsp}]*’([^a-zA-Z])/”${hairsp}’\1/ig

		#Fix ellipses spacing
		s/\s*\.\s*\.\s*\.\s*/…/ig
		s/\s?…\s?\./.${hairsp}…/ig
		s/([a-zA-Z])\s?…/\1${hairsp}…/ig
		s/…[[:space:]${nbsp}]+([\)”’])/…\1/ig
		s/([\(“‘])[[:space:]${nbsp}]+…/\1…/ig
		s/…\s?([\!\?\.\;])/…${hairsp}\1/ig
		s/([\!\?\.\;”’])\s?…/\1${hairsp}…/ig
		s/\,\s?…/,${hairsp}…/ig

		#Add non-breaking spaces between amounts with an abbreviated unit.  E.g. 8 oz., 10 lbs.
		s/([0-9])\s([a-z]{1,3}\.)/\1${nbsp}\2/ig

		#Fix some spelling archaisms
		s/([Nn])aïve/\1aive/g
		s/([Nn])a[ïi]vet[ée]/\1aivete/g
		s/&amp;c\./etc./g
		s/([Pp])rotege/\1rotégé/g
		s/([Tt])ete-a-tete/\1ête-à-tête/g
		s/([Ff])acade/\1açade/g
		s/([Cc])hateau/\1âteau/g
		#We break up cafe so that we don't catch 'cafeteria'
		s/(\b[Cc])afe(\b)/\1afé\2/g
		s/(\b[Cc])afes(\b)/\1afés\2/g
		s/([Mm])êlée/\1elee/g
		s/(\b[Ff])ete(\b)/\1ête\2/g
		s/(\b[Rr])ôle(\b)/\1ole\2/g
		s/(\b[Cc])oö/\1oo/g
		s/(\b[Rr])eë/\1ee/g
		s/(\b[Dd])aïs(\b)/\1ais\2/g
		s/([Cc])oup\-de\-grace/\1oup-de-grâce/g
		s/([Cc])anape/\1anapé/g

		s/Ph\.D/PhD/g
		s/P\.\s*S\./P.S./g

		#Fractions
		s/1\/4/¼/g
		s/1\/2/½/g
		s/3\/4/¾/g
		s/1\/3/⅓/g
		s/2\/3/⅔/g
		s/1\/5/⅕/g
		s/2\/5/⅖/g
		s/3\/5/⅗/g
		s/4\/5/⅘/g
		s/1\/6/⅙/g
		s/5\/6/⅚/g
		s/1\/8/⅛/g
		s/3\/8/⅜/g
		s/5\/8/⅝/g
		s/7\/8/⅞/g

		#Remove spaces between whole numbers and fractions
		s/([0-9,]+)\s+([¼½¾⅔⅕⅖⅗⅘⅙⅚⅛⅜⅝⅞])/\1\2/g

		#Use the Unicode Minus glyph (U+2212) for negative numbers
		s/([[:space:]\>])\-([0-9,]+)/\1−\2/g

		" "${file}"

		#Add <abbr class="name"> tag around initials: [A-Z]\.\s*([A-Z]\.\s*)+

		#Small caps AM and PM; thin space before Arabic numbers, but not if spelled out.  3&nbsp;<span class="time">a.m.</span>, one <span class="time">a.m.</span>

		#Search coordinates: ([0-9])+’/\1′ and ([0-9])+”/\1″

		#Search for em-dashes that were not closed correctly by smartypants: —[’”][^<\s]

		#Search for en-dash candidates: /([0-9]+)[\-—]([0-9]+)/\1–\2/sig

		#Surround ampersands in proper names with nbsp: hawkins & harker [a-zA-Z]\.?\s*&amp;\s*[a-zA-Z]

		#Text in all caps should be converted to correct case, surrounded by <b> styled for small caps: /[A-Z]{3,}/

		#Temperature: small caps F and C:  /\-\d+\b/

		#Measurements: A x B x C should be A × B × C: /\sx\s/

		if [ "${verbose}" = "true" ]; then
			printf " OK\n"
		fi
	done
done
