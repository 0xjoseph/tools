#!/usr/bin/env python3

import argparse
import os
import regex #We use the regex module, not the re module, because it allows matching by character class
from bs4 import BeautifulSoup
import sys
import fnmatch
import re

def is_positive_integer(value):
	int_value = int(value)
	if int_value <= 0:
		raise argparse.ArgumentTypeError("{} is not a positive integer".format(value))

	return int_value

def main():
	parser = argparse.ArgumentParser(description="Increment the specified endnote and all following endnotes by 1.")
	parser.add_argument("target_endnote_number", metavar="ENDNOTE-NUMBER", type=is_positive_integer, help="The endnote number to start incrementing at")
	parser.add_argument("directory", metavar="DIRECTORY", help="A Standard Ebooks source directory")
	args = parser.parse_args()

	directory = os.path.abspath(args.directory)
	target_endnote_number  = int(args.target_endnote_number)
	endnote_count = 0
	source_directory = os.path.join(directory, "src/")

	#First test if we're looking at a Standard Ebooks source directory
	if not os.path.isdir(os.path.join(source_directory)):
		print("Error: Doesn't look like a Standard Ebook source directory: {}".format(directory), file=sys.stderr)
		exit(1)

	#First get the highest numbered endnote
	try:
		endnotes_filename = os.path.join(source_directory, "epub/text/endnotes.xhtml")
		with open(endnotes_filename, 'r+', encoding="utf-8") as file:
			html = file.read()
			file.seek(0)
			soup = BeautifulSoup(html, "lxml")

			endnote_count = len(soup.select("li[data-se-note-number]"))

			for endnote_number in range(endnote_count, target_endnote_number - 1, -1):
				html = html.replace("id=\"note-{}\"".format(endnote_number), "id=\"note-{}\"".format(endnote_number + 1))
				html = html.replace("data-se-note-number=\"{}\"".format(endnote_number), "data-se-note-number=\"{}\"".format(endnote_number + 1))
				html = html.replace("#note-{}\"".format(endnote_number), "#note-{}\"".format(endnote_number + 1))

			file.write(html)

	except Exception:
		print("Error: Couldn't open endnotes file: {}".format(endnotes_filename), file=sys.stderr)
		exit(1)

	for root, dirnames, filenames in os.walk(source_directory):
		for basename in fnmatch.filter(filenames, '*.xhtml'):

			#Skip endnotes.xhtml since we already processed it
			if basename == "endnotes.xhtml":
				continue

			with open(os.path.join(root, basename), 'r+', encoding="utf-8") as file:
				html = file.read()
				file.seek(0)

				for endnote_number in range(endnote_count, target_endnote_number - 1, -1):
					html = re.sub(r"(<a[^>]*?>){}<\/a>".format(endnote_number), "\g<1>{}</a>".format(endnote_number + 1), html, flags=re.UNICODE | re.MULTILINE | re.DOTALL)
					html = html.replace("id=\"note-{}\"".format(endnote_number), "id=\"note-{}\"".format(endnote_number + 1))
					html = html.replace("#note-{}\"".format(endnote_number), "#note-{}\"".format(endnote_number + 1))

				file.write(html)

if __name__ == "__main__":
	main()
