#!/bin/bash
usage(){
	fmt <<EOF
DESCRIPTION
	Create a skeleton of a new Standard Ebooks ebook.

USAGE
	create-ebook [-e,--email=EMAIL] [-g,--github] AUTHOR TITLE
		Create a new ebook skeleton in ../drafts/AUTHOR/TITLE/

		If --email is specified, initialize the Git repository using that email address as the main committer.

		If --github is specified, initialize a new Github repository for this ebook.  You must be a member of the standardebooks Github organization.
EOF
	exit
}
die(){ printf "Error: ${1}\n" 1>&2; exit 1; }
if [ $# -eq 1 ]; then if [ "$1" = "--help" -o "$1" = "-h" ]; then usage; fi fi
#End boilerplate

if [ $# -lt 2 ]; then
	usage
fi

customEmail=''
author=''
title=''
initializeGithub=false

for i in "$@"
do
case $i in
	-e=*|--email=*)
		customEmail=$(echo "${i}" | sed 's/[-a-zA-Z0-9]*=//')
		shift
	;;
	-g|--github)
		initializeGithub=true
		shift
	;;
esac
done

if [ $# -eq 2 ]; then
	author="${1}"
	title="${2}"
else
	die "Incorrect number of arguments"
fi

scriptDir="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

#Convert the title to something URL and filesystem friendly.
#1. Convert accented characters to unaccented characters
#2. Trim title.
#3. Convert title to lowercase.
#4. Remove apostrophes.
#5. Convert any non-digit, non-letter character to a space.
#6. Convert any instance of one or more space to a dash.
urlAuthor=$(printf "%s" "${author}" \
	| iconv -f utf8 -t ascii//TRANSLIT \
	| sed --expression="s/^ *//" --expression="s/ *$//" \
	| tr '[:upper:]' '[:lower:]' \
	| sed "s/'//g" \
	| sed "s/[^0-9a-zA-Z]/ /g" \
	| sed --regexp-extended "s/\s+/-/g")

urlTitle=$(printf "%s" "${title}" \
	| iconv -f utf8 -t ascii//TRANSLIT \
	| sed --expression="s/^ *//" --expression="s/ *$//" \
	| tr '[:upper:]' '[:lower:]' \
	| sed "s/'//g" \
	| sed "s/[^0-9a-zA-Z]/ /g" \
	| sed --regexp-extended "s/\s+/-/g")

root="${urlAuthor}/${urlTitle}"

mkdir -p "${root}/images"
mkdir -p "${root}/dist"
mkdir -p "${root}/src/epub/css"
mkdir -p "${root}/src/epub/images"
mkdir -p "${root}/src/epub/text"

cp -r "${scriptDir}/templates/META-INF/" "${root}/src/"
cp "${scriptDir}/templates/mimetype" "${root}/src/"
cp "${scriptDir}/templates/onix.xml" "${root}/src/epub/"
cp "${scriptDir}/templates/toc.xhtml" "${root}/src/epub/"
cp "${scriptDir}/templates/core.css" "${root}/src/epub/css/"
cp "${scriptDir}/templates/logo.svg" "${root}/src/epub/images/"
cp "${scriptDir}/templates/unlicense.xhtml" "${root}/src/epub/text/"

cp "${scriptDir}/templates/titlepage.svg" "${root}/images/"
cp "${scriptDir}/templates/local.css"  "${root}/src/epub/css/"
cp "${scriptDir}/templates/colophon.xhtml"  "${root}/src/epub/text/"
cp "${scriptDir}/templates/titlepage.xhtml"  "${root}/src/epub/text/"
cp "${scriptDir}/templates/content.opf"  "${root}/src/epub/"

if [ ${#title} -lt 15 ]; then
	cp "${scriptDir}/templates/cover-short.svg" "${root}/images/cover.svg"
else
	cp "${scriptDir}/templates/cover.svg" "${root}/images/cover.svg"
fi

sed --in-place --regexp-extended "s/TITLE/${title}/g" "${root}/src/epub/text/titlepage.xhtml"
sed --in-place --regexp-extended "s/AUTHOR/${author}/g" "${root}/src/epub/text/titlepage.xhtml"
sed --in-place --regexp-extended "s/URLAUTHOR/${urlAuthor}/g" "${root}/src/epub/content.opf"
sed --in-place --regexp-extended "s/URLTITLE/${urlTitle}/g" "${root}/src/epub/content.opf"
sed --in-place --regexp-extended "s/AUTHOR/${author}/g" "${root}/src/epub/content.opf"
sed --in-place --regexp-extended "s/TITLE/${title}/g" "${root}/src/epub/content.opf"
sed --in-place --regexp-extended "s/URLAUTHOR/${urlAuthor}/g" "${root}/src/epub/text/colophon.xhtml"
sed --in-place --regexp-extended "s/URLTITLE/${urlTitle}/g" "${root}/src/epub/text/colophon.xhtml"
sed --in-place --regexp-extended "s/TITLE/${title}/g" "${root}/src/epub/text/colophon.xhtml"
sed --in-place --regexp-extended "s/AUTHOR/${author}/g" "${root}/src/epub/text/colophon.xhtml"

git init --quiet "${root}"
printf "dist/*\n" > "${root}/.gitignore"
cp "${scriptDir}/pre-commit"  "${root}/.git/hooks/"

if [ "${customEmail}" != "" ]; then
	cd "${root}"
	git config user.email "${customEmail}"
fi

#Create github repo
if [ "${initializeGithub}" = true ]; then
	defaultRepoName="${urlAuthor}-${urlTitle}"
	echo "Enter a name for a new Github repository.  The format for Github repositories is: <url-author>-<url-title>[-<url-contributors>]."
	echo "Leave blank to use: ${defaultRepoName}"
	read repoName

	if [ "${repoName}" = "" ]; then
		repoName="${defaultRepoName}"
	fi

	sed --in-place "s|VCSLINK|https://github.com/standardebooks/${repoName}|" "${root}/src/epub/content.opf"

	echo "Enter your Github username:"
	read githubUsername

	output=$(curl -s -i -u "${githubUsername}" https://api.github.com/orgs/standardebooks/repos -d "{\"name\":\"${repoName}\"}")

	echo "${output}" | grep -q -i "201 OK"
	if [ $? -ne 0 ]; then
		cd "${root}"
		git remote add github git@github.com:"standardebooks/${repoName}.git"
	else
		echo "Error during Github request:" 1>&2
		die "${output}"
	fi
fi
