#!/usr/bin/env python3

import argparse
import re
import glob
import lxml.cssselect
import lxml.etree as etree
import subprocess
import sys
import fnmatch
import os

def namespaceToClass(selector):
	return selector.replace(":", "-").replace("|", "-").replace("~=", "-").replace("[", ".").replace("]", "").replace("\"", "")

def simplifyCss(css):
	#First we replace :first-child selectors with a first-child class, since ADE doesn't handle them
	#Currently this replacement isn't perfect, because occasionally lxml generates an xpath expression
	#from the css selector that lxml itself can't evaluate, even though the `xpath` binary can!
	#We don't *replace* the selector, we *add* it, because lxml has problems selecting first-child sometimes
	css = re.sub(r"((.+)\:first\-child(.*))", "\\2.first-child\\3,\n\\1", css)
	css = css.replace("{,", ",")
	css = css.replace(",,", ",")

	#Now replace abbr styles with spans, because ADE screws up with unrecognized elements
	css = css.replace("abbr", "span")

	#Replace shorthand CSS with longhand properties, another ADE screwup
	css = re.sub(r"margin:\s*([^\s]+?)\s*;", "margin-top: \\1;\n\tmargin-right: \\1;\n\tmargin-bottom: \\1;\n\tmargin-left: \\1;", css)
	css = re.sub(r"margin:\s*([^\s]+?)\s+([^\s]+?)\s*;", "margin-top: \\1;\n\tmargin-right: \\2;\n\tmargin-bottom: \\1;\n\tmargin-left: \\2;", css)
	css = re.sub(r"margin:\s*([^\s]+?)\s+([^\s]+?)\s+([^\s]+?)\s*;", "margin-top: \\1;\n\tmargin-right: \\2;\n\tmargin-bottom: \\3;\n\tmargin-left: \\2;", css)
	css = re.sub(r"margin:\s*([^\s]+?)\s+([^\s]+?)\s+([^\s]+?)\s+([^\s]+?)\s*;", "margin-top: \\1;\n\tmargin-right: \\2;\n\tmargin-bottom: \\3;\n\tmargin-left: \\4;", css)

	#Replace some more poorly-supported CSS attributes
	css = css.replace("all-small-caps;", "small-caps;\n\ttext-transform: lowercase;")

	#Replace CSS namespace selectors
	#For example, p[epub|type~="z3998:salutation"] becomes p.epub-type-z3998-salutation
	result = re.findall(r"\[epub\|type\~\=\"[^\"]*?\"\]", css)
	for line in result:
		fixedLine = namespaceToClass(line)
		css = css.replace(line, fixedLine)

	return css

def main():
	parser = argparse.ArgumentParser(description="Simplify some HTML and CSS to be more compatible with crappier reading systems (ADE I'm looking at you...)")
	parser.add_argument("-v", "--verbose", help="Increase output verbosity", action="store_true")
	parser.add_argument('directories', metavar='DIRECTORY', nargs='+', help='A source directory')
	args = parser.parse_args()

	xhtmlNamespaces = {"xhtml": "http://www.w3.org/1999/xhtml", "epub": "http://www.idpf.org/2007/ops", "z3998": "http://www.daisy.org/z3998/2012/vocab/structure/", "se": "http://standardebooks.org/vocab/1.0"}

	#Check!
	for dir in args.directories:
		dir = os.path.abspath(dir)

		if args.verbose:
			print("Checking " + dir + " ...", end="", flush=True)

		totalCss = ""

		for root, dirnames, filenames in os.walk(dir):
			for basename in fnmatch.filter(filenames, '*.css'):
				filename = os.path.join(root, basename)
				with open(filename, "r+", encoding="utf-8") as file:
					css = file.read()

					#Before we do anything, we process a special case in core.css
					if "core.css" in filename:
						css = re.sub(r"abbr{.+?}", "", css, flags=re.MULTILINE | re.DOTALL)

					totalCss = totalCss + css + "\n"
					file.seek(0)
					file.write(simplifyCss(css))
					file.truncate()

		#Remove actual content of css selectors
		totalCss = re.sub("{[^}]+}", "", totalCss, flags=re.MULTILINE)

		#Remove trailing commas
		totalCss = re.sub(",", "", totalCss)

		#Remove comments
		totalCss = re.sub("\/\*.+?\*\/", "", totalCss, flags=re.DOTALL)

		#Remove @ defines
		totalCss = re.sub("^@.+", "", totalCss, flags=re.MULTILINE)

		#Construct a dictionary of selectors
		selectors = list(set(filter(None, totalCss.splitlines())))
		unusedSelectors = list(selectors)

		#Get a list of .xhtml files to search
		for root, dirnames, filenames in os.walk(dir):
			for basename in fnmatch.filter(filenames, '*.xhtml'):
				filename = os.path.join(root, basename)

				#Don't mess with the ToC, since if we have ol/li > first-child selectors we could screw it up
				if basename == "toc.xhtml":
					continue

				with open(filename, "r+", encoding="utf-8") as file:
					#We have to remove the default namespace declaration from our document, otherwise
					#xpath won't find anything at all.  See http://stackoverflow.com/questions/297239/why-doesnt-xpath-work-when-processing-an-xhtml-document-with-lxml-in-python
					rawXhtml = file.read().replace(" xmlns=\"http://www.w3.org/1999/xhtml\"", "")
					processedXhtml = rawXhtml;
					tree = etree.fromstring(str.encode(rawXhtml))

					#Now iterate over each CSS selector and see if it's used in any of the files we found
					for selector in selectors:
						try:
							sel = lxml.cssselect.CSSSelector(selector, translator="xhtml", namespaces=xhtmlNamespaces)
						except lxml.cssselect.ExpressionError:
							#This gets thrown if we use pseudo-elements, which lxml doesn't support
							continue

						if "abbr" in selector:
							for el in tree.xpath(sel.path, namespaces=xhtmlNamespaces):
								#Why would you want the tail to output by default?!?
								rawString = etree.tostring(el, encoding=str, with_tail=False)

								#lxml--crap as usual--includes a bunch of namespace information in every element we print.
								#Remove it here.
								rawString = rawString.replace(" xmlns=\"http://www.w3.org/1999/xhtml\"", "")
								rawString = rawString.replace(" xmlns:epub=\"http://www.idpf.org/2007/ops\"", "")

								#Now lxml doesn't let us modify the tree, so we just do a straight up regex replace to turn this into a span
								processedString = rawString.replace("<abbr", "<span")
								processedString = processedString.replace("</abbr", "</span")

								#Now we have a nice, fixed string.  But, since lxml can't replace elements, we write it ourselves.
								processedXhtml = processedXhtml.replace(rawString, processedString)

								tree = etree.fromstring(str.encode(processedXhtml))

						if ":first-child" in selector:
							for el in tree.xpath(sel.path, namespaces=xhtmlNamespaces):
								currentClass = el.get('class')
								if currentClass is not None and "first-child" not in currentClass:
									currentClass = currentClass + ' first-child'
								else:
									currentClass = "first-child"

								el.set('class', currentClass)

					for selector in selectors:
						#We've already replaced attribute/namespace selectors with classes in the CSS, now add those classes to the matching elements
						if "[epub|type" in selector:
							result = re.findall(r"\[epub\|type\~\=\"[^\"]*?\"\]", selector)
							for namespaceSelector in result:
								try:
									sel = lxml.cssselect.CSSSelector(namespaceSelector, translator="xhtml", namespaces=xhtmlNamespaces)
								except lxml.cssselect.ExpressionError:
									#This gets thrown if we use pseudo-elements, which lxml doesn't support
									continue

								for el in tree.xpath(sel.path, namespaces=xhtmlNamespaces):
									newClass = re.sub(r"^\.", "", namespaceToClass(namespaceSelector))
									currentClass = el.get('class')

									if currentClass is not None and newClass not in currentClass:
										currentClass = currentClass + ' ' + newClass
									else:
										currentClass = newClass

									el.set('class', currentClass)

					processedXhtml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + etree.tostring(tree, encoding=str, pretty_print="true")

					#Now we just remove all stray abbr tags that were not styled by CSS
					processedXhtml = re.sub(r"</?abbr[^>]*?>", "", processedXhtml)
					tree = etree.fromstring(str.encode(processedXhtml))

					if processedXhtml != rawXhtml:
						file.seek(0)
						file.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + etree.tostring(tree, encoding=str, pretty_print="true").replace("<html", "<html xmlns=\"http://www.w3.org/1999/xhtml\""))
						file.truncate()

if __name__ == "__main__":
	main()
