#!/bin/bash
usage(){
	fmt <<EOF
DESCRIPTION
	Prettify source files in a Standard Ebook source directory, including canonicalizing XML and minifying SVGs.  Note that this only prettifies the source code; it doesn't perform typography changes.

USAGE
	clean [-v,--verbose] DIRECTORY [DIRECTORY...]
		DIRECTORY is the source directory, which must contain DIRECTORY/src/.
EOF
	exit
}
die(){ printf "Error: ${1}\n" 1>&2; exit 1; }
require(){ command -v $1 > /dev/null 2>&1 || { suggestion=""; if [ ! -z "$2" ]; then suggestion=" $2"; fi; die "$1 is not installed.${suggestion}"; } }
if [ $# -eq 1 ]; then if [ "$1" = "--help" -o "$1" = "-h" ]; then usage; fi fi
#End boilerplate

#Check for dependencies
require "recode" "Try: sudo apt-get install recode"
require "xml2asc" "Try: sudo apt-get install html-xml-utils"

if [ $# -eq 0 ]; then
	usage
fi

verbose="false"
dirs=""

while [ $# -gt 0 ]
do
	case "$1" in
		-v|--verbose)
			verbose="true"
		;;
		*)
			dirs=$(printf "%s\n%s" "${dirs}" "$1")
		;;
	esac
	shift
done

#Set xmllint to use tab indentation.
export XMLLINT_INDENT=$(printf "\t")

printf "%s\n" "${dirs}" | while IFS= read -r i;
do
	if [ "${i}" = "" ]; then
		continue
	fi

	srcDir="$(realpath "${i%/}")"

	if [ ! -d "${srcDir}/src" ]; then
		die "${srcDir} does't look like a Standard Ebook source directory."
	fi

	if [ "${verbose}" = "true" ]; then
		printf "Cleaning %s ..." "${srcDir}"
	fi

	#Epub3 doesn't allow named entities, so convert them to their unicode equivalents
	#First we use xml2asc to convert *all* special characters to named entities.
	#Then recode converts named entities to unicode.
	find "${srcDir}" -iname "*.xhtml" -type f -exec sh -c "xml2asc < "{}" | recode HTML | sed \"s/&/&amp;/g\" > /tmp/tmp.xhtml; mv /tmp/tmp.xhtml "{}"" \;

	#Clean files with xmllint.
	#The --c14n flag removes the XML declaration, so we re-add it before formatting.  Otherwise we get problems.
	find "${srcDir}" -iname "*.xhtml" -type f -exec sh -c "xmllint --c14n "{}" | (printf '%s\n' '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' && cat) | xmllint --output "{}" --format -" \;
	find "${srcDir}" \( -iname "*.svg" -o -iname "*.opf" -o -iname "*.xml" \) -type f -exec sh -c "xmllint --c14n "{}" | (printf '%s\n' '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' && cat) | xmllint --output "{}" --format -" \;

	#Add trailing newlines to files that don't have one.
	find "${srcDir}" \( -iname "*.xhtml" -o -iname "*.svg" -o -iname "*.css" -o -iname "*.opf" -o -iname "*.xml" \) -type f -exec sed -i -e '$a\' "{}" \;

	if [ "${verbose}" = "true" ]; then
		printf "%s\n" " OK"
	fi
done
