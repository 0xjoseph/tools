#!/bin/bash
usage(){
	fmt <<EOF
DESCRIPTION
	Build an ebook cover a Standard Ebooks ebook source directory and place the output in DIRECTORY/src/epub/images/.

USAGE
	build-images [-v,--verbose] [-f,--force] DIRECTORY [DIRECTORY...]
		DIRECTORY is the source directory, which must contain DIRECTORY/images/ and DIRECTORY/src/.
		
		With --force, build the images regardless of whether the source checksums are different.
EOF
	exit
}
die(){ printf "Error: ${1}\n" 1>&2; exit 1; }
require(){ command -v $1 > /dev/null 2>&1 || { suggestion=""; if [ ! -z "$2" ]; then suggestion=" $2"; fi; die "$1 is not installed.${suggestion}"; } }
if [ $# -eq 1 ]; then if [ "$1" = "--help" -o "$1" = "-h" ]; then usage; fi fi
#End boilerplate

require "inkscape" "Try: sudo apt-get install inkscape"
require "svgcleaner-cli" "Try: sudo apt-get install svgcleaner"

#Check if the League Spartan font is installed before continuing
fc-list | grep --quiet "League Spartan" || die "The League Spartan font doesn't seem to be installed.  See https://github.com/theleagueof/league-spartan"

if [ $# -eq 0 ]; then
	usage
fi

curDir="$(pwd)"
verbose="false"
dirs=""
currentCoverSha1=""
currentTitleSha1=""
force="false"

#Set xmllint to use tab indentation.
export XMLLINT_INDENT=$(printf "\t")

while [ $# -gt 0 ]
do
	case "$1" in
		-v|--verbose)
			verbose="true"
		;;
		-f|--force)
			force="true"
		;;
		*)
			dirs=$(printf "%s\n%s" "${dirs}" "$1")
		;;
	esac
	shift
done

printf "%s\n" "${dirs}" | while IFS= read -r i;
do
	if [ "${i}" = "" ]; then
		continue
	fi
	
	cd "${curDir}" #Reset when starting the loop over

	srcDir="$(realpath "${i%/}")"
	destDir="${srcDir}/src/epub/images"

	if [ ! -d "${srcDir}/src" ]; then
		die "${srcDir} doesn't look like a Standard Ebooks ebook source directory."
	fi
	
	if [ ! -d "${srcDir}/src/epub/images" ]; then
		die "${srcDir} is missing the images folder."
	fi

	if [ "${verbose}" = "true" ]; then
		printf "Building %s ...\n" "${srcDir}"
	fi

	#Do we need to build cover.svg?
	canBuildCover="true"
	#Check if the source svg exists
	if [ ! -f "${srcDir}/images/cover.svg" ]; then
		if [ "${verbose}" = "true" ]; then
			printf "\timages/cover.svg not found, skipping ... ERROR\n" 1>&2
		fi
		
		canBuildCover="false"
	fi
	
	if [ ! -f "${srcDir}/images/cover.jpg" ]; then
		if [ "${verbose}" = "true" ]; then
			printf "\timages/cover.jpg not found, skipping ... ERROR\n" 1>&2
		fi
		
		canBuildCover="false"
	fi
	
	buildCover="true"
	#Source svg exists, check if the sources match the already built image
	if [ "${canBuildCover}" = "true" ]; then
		currentCoverSha1=$(cat "${srcDir}/images/cover.svg" "${srcDir}/images/cover.jpg" | sha1sum | cut -d " " -f 1)
	
		if [ -f "${srcDir}/src/epub/images/cover.svg" ]; then
			oldSha1=$(grep --extended-regexp --only-matching "se\:generated\-from=\"[a-fA-F0-9]{40}\"" "${srcDir}/src/epub/images/cover.svg" | cut -d "\"" -f 2)

			if [ "${oldSha1}" = "${currentCoverSha1}" ] && [ "${force}" = "false" ]; then
				if [ "${verbose}" = "true" ]; then
					printf "\tcover.svg doesn't need building, skipping ... OK\n"
				fi
				buildCover="false"
			fi
		fi
	fi
	
	if [ "${canBuildCover}" = "true" ] && ( [ "${buildCover}" = "true" ] || [ "${force}" = "true" ] ); then
		if [ "${verbose}" = "true" ]; then
			printf "\tBuilding cover.svg ..."
		fi
	
		#Convert text to paths
		inkscape "${srcDir}/images/cover.svg" --export-text-to-path --export-plain-svg "/tmp/cover.svg"
		
		#Embed linked images
		printf "s|xlink:href=\"[^\"]+cover.jpg|xlink:href=\"data:image/jpeg;base64," > /tmp/cover.sed
		base64 -w 0 "${srcDir}/images/cover.jpg" >> /tmp/cover.sed
		printf "|" >> /tmp/cover.sed
		sed --regexp-extended --file=/tmp/cover.sed "/tmp/cover.svg" > "${destDir}/cover.svg"
		
		#This huge list of flags emulates `svgcleaner-cli --type-complete`, but WITHOUT the paths options, which usually messes things up.
		svgcleaner-cli "${destDir}/cover.svg" "${destDir}/cover.svg" --remove-comments --remove-unused-defs --remove-nonsvg-elts --remove-metadata-elts --remove-inkscape-elts --remove-sodipodi-elts --remove-ai-elts --remove-corel-elts --remove-msvisio-elts --remove-sketch-elts --remove-invisible-elts --remove-empty-containers --remove-duplicated-defs --remove-outside-elts --equal-elts-to-use --ungroup-containers --merge-gradients --remove-unreferenced-ids --trim-ids --remove-notappl-atts --remove-default-atts --remove-inkscape-atts --remove-sodipodi-atts --remove-ai-atts --remove-corel-atts --remove-msvisio-atts --remove-sketch-atts --remove-stroke-props --remove-fill-props --remove-unused-xlinks --join-style-atts --simplify-transform-matrix --apply-transforms-to-defs --apply-transforms-to-shapes --colors-to-rrggbb --rrggbb-to-rgb --convert-basic-shapes --create-viewbox --apply-transforms-to-defs --sort-defs > /dev/null 2>&1
		
		#Embed our sha1sum
		sed --regexp-extended --in-place "s|<svg|<svg xmlns:se=\"https://standardebooks.org/vocab/1.0\" se:generated-from=\"${currentCoverSha1}\"|" "${destDir}/cover.svg"

		#Clean up the final SVG
		xmllint --c14n "${destDir}/cover.svg" | (printf '%s\n' '<?xml version="1.0" encoding="UTF-8"?>' && cat) | xmllint --output "${destDir}/cover.svg" --format -

		if [ "${verbose}" = "true" ]; then
			printf " OK\n"
		fi
	fi
	
	#Do we need to build titlepage.svg?
	canBuildTitle="true"
	#Check if the source svg exists
	if [ ! -f "${srcDir}/images/titlepage.svg" ]; then
		if [ "${verbose}" = "true" ]; then
			printf "\timages/titlepage.svg not found, skipping ... ERROR\n" 1>&2
		fi
		
		canBuildTitle="false"
	fi
	
	buildTitle="true"
	#Source svg exists, check if the sources match the already built image
	if [ "${canBuildTitle}" = "true" ]; then
		currentTitleSha1=$(cat "${srcDir}/images/titlepage.svg" | sha1sum | cut -d " " -f 1)
	
		if [ -f "${srcDir}/src/epub/images/titlepage.svg" ]; then
			oldSha1=$(grep --extended-regexp --only-matching "se\:generated\-from=\"[a-fA-F0-9]{40}\"" "${srcDir}/src/epub/images/titlepage.svg" | cut -d "\"" -f 2)

			if [ "${oldSha1}" = "${currentTitleSha1}" ] && [ "${force}" = "false" ]; then
				if [ "${verbose}" = "true" ]; then
					printf "\ttitlepage.svg doesn't need building, skipping ... OK\n"
				fi
				buildTitle="false"
			fi
		fi
	fi
	
	if [ "${canBuildTitle}" = "true" ] && ( [ "${buildTitle}" = "true" ] || [ "${force}" = "true" ] ); then
		if [ "${verbose}" = "true" ]; then
			printf "\tBuilding titlepage.svg ..."
		fi
		
		#Convert text to paths
		inkscape "${srcDir}/images/titlepage.svg" --export-text-to-path --export-plain-svg "${destDir}/titlepage.svg"
		
		#This huge list of flags emulates `svgcleaner-cli --type-complete`, but WITHOUT the paths options, which usually messes things up.
		svgcleaner-cli "${destDir}/titlepage.svg" "${destDir}/titlepage.svg" --remove-comments --remove-unused-defs --remove-nonsvg-elts --remove-metadata-elts --remove-inkscape-elts --remove-sodipodi-elts --remove-ai-elts --remove-corel-elts --remove-msvisio-elts --remove-sketch-elts --remove-invisible-elts --remove-empty-containers --remove-duplicated-defs --remove-outside-elts --equal-elts-to-use --ungroup-containers --merge-gradients --remove-unreferenced-ids --trim-ids --remove-notappl-atts --remove-default-atts --remove-inkscape-atts --remove-sodipodi-atts --remove-ai-atts --remove-corel-atts --remove-msvisio-atts --remove-sketch-atts --remove-stroke-props --remove-fill-props --remove-unused-xlinks --join-style-atts --simplify-transform-matrix --apply-transforms-to-defs --apply-transforms-to-shapes --colors-to-rrggbb --rrggbb-to-rgb --convert-basic-shapes --create-viewbox --apply-transforms-to-defs --sort-defs > /dev/null 2>&1
		
		#Embed our sha1sum
		sed --regexp-extended --in-place "s|<svg|<svg xmlns:se=\"https://standardebooks.org/vocab/1.0\" se:generated-from=\"${currentTitleSha1}\"|" "${destDir}/titlepage.svg"

		#Clean up the final SVG
		xmllint --c14n "${destDir}/titlepage.svg" | (printf '%s\n' '<?xml version="1.0" encoding="UTF-8"?>' && cat) | xmllint --output "${destDir}/titlepage.svg" --format -

		if [ "${verbose}" = "true" ]; then
			printf " OK\n"
		fi
	fi
done
