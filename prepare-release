#!/bin/bash
usage(){
	fmt <<EOF
DESCRIPTION
	Calculate work word count, insert release date if none set, update modified date, and check for the presence of draft CSS rules.

USAGE
	build [-v,--verbose] [-n,--no-word-count] DIRECTORY [DIRECTORY...]
		DIRECTORY is the source directory, which must contain DIRECTORY/src/.
		With the --no-word-count option, don't perform a word count calculation.
EOF
	exit
}
die(){ printf "Error: ${1}\n" 1>&2; exit 1; }
require(){ command -v $1 > /dev/null 2>&1 || { suggestion=""; if [ ! -z "$2" ]; then suggestion=" $2"; fi; die "$1 is not installed.${suggestion}"; } }
if [ $# -eq 1 ]; then if [ "$1" = "--help" -o "$1" = "-h" ]; then usage; fi fi
#End boilerplate

timestamp="$(date --utc +%s)"
isoTimestamp="$(date -d @${timestamp} --utc +"%Y-%m-%dT%H:%M:%SZ")"
friendlyTimestamp="$(date -d @${timestamp} --utc +"%B %e, %Y, %l:%MÂ <abbr class=\"time eoc\">%p</abbr>" | sed --regexp-extended "s/\s+/ /g" | sed "s/>AM/>a.m./" | sed "s/>PM/>p.m./")"
scriptDir="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
wordcountPath="${scriptDir}/wordcount"
contentOpfFilePath="${ebookRoot}src/epub/content.opf"
colophonPath="${ebookRoot}src/epub/text/colophon.xhtml"
dirs=""
verbose="false"
doWordCount="true"

while [ $# -gt 0 ]
do
	case "$1" in
		-v|--verbose)
			verbose="true"
		;;
		-n|--no-word-count)
			doWordCount="false"
		;;
		*)
			dirs=$(printf "%s\n%s" "${dirs}" "$1")
		;;
	esac
	shift
done

printf "%s\n" "${dirs}" | while IFS= read -r i;
do
	if [ "${i}" = "" ]; then
		continue
	fi

	srcDir="$(realpath "${i%/}")"

	if [ ! -d "${srcDir}/src" ]; then
		die "${srcDir} doesn't look like a Standard Ebook source directory."
	fi

	if [ "${verbose}" = "true" ]; then
		printf "Preparing %s ...\n" "${srcDir}"
	fi

	if [ "${doWordCount}" = "true" ]; then
		if [ "${verbose}" = "true" ]; then
			printf "\tUpdating word count ..."
		fi

		wordCount=0
		for file in $(find "${srcDir}" -name "*.xhtml")
		do
			filename=$(basename "${file}")
			if [ "${filename}" != "titlepage.xhtml" -a "${filename}" != "colophon.xhtml" -a "${filename}" != "halftitle.xhtml" -a "${filename}" != "unlicense.xhtml" -a "${filename}" != "endnotes.xhtml" -a "${filename}" != "toc.xhtml" ]; then
				currentCount=$("${wordcountPath}" "${file}")
				wordCount=$((${wordCount} + ${currentCount}))
			fi
		done
		sed --in-place --regexp-extended "s|<meta property=\"se:word-count\">[^<]*</meta>|<meta property=\"se:word-count\">${wordCount}</meta>|g" "${srcDir}/src/epub/content.opf" > /dev/null 2>&1

		if [ "${verbose}" = "true" ]; then
			printf " Done.\n"
		fi
	fi

	grep --quiet "RELEASEDATE" "${srcDir}/src/epub/content.opf"
	if [ $? -eq 0 ]; then
		if [ "${verbose}" = "true" ]; then
			printf "\tSetting release date ..."
		fi
		
		sed --in-place --regexp-extended "s|<dc:date>[^<]*</dc:date>|<dc:date>${isoTimestamp}</dc:date>|g" "${srcDir}/src/epub/content.opf" > /dev/null 2>&1
		sed --in-place --regexp-extended "s|<span class=\"release-date\">.+?</span>|<span class=\"release-date\">${friendlyTimestamp}</span>|g" "${srcDir}/src/epub/text/colophon.xhtml" > /dev/null 2>&1

		if [ "${verbose}" = "true" ]; then
			printf " Done.\n"
		fi
	fi

	if [ "${verbose}" = "true" ]; then
		printf "\tSetting modified date ..."
	fi

	sed --in-place --regexp-extended "s|<meta property=\"dcterms:modified\">[^<]*</meta>|<meta property=\"dcterms:modified\">${isoTimestamp}</meta>|g" "${srcDir}/src/epub/content.opf" > /dev/null 2>&1
	sed --in-place --regexp-extended "s|<span class=\"revision-date\">.+?</span>|<span class=\"revision-date\">${friendlyTimestamp}</span>|g" "${srcDir}/src/epub/text/colophon.xhtml" > /dev/null 2>&1

	if [ "${verbose}" = "true" ]; then
		printf " Done.\n"
	fi

	grep --quiet -i "helpful during drafting" "${srcDir}/src/epub/css/local.css"
	if [ $? -eq 0 ]; then
		if [ "${verbose}" = "true" ]; then
			printf "\t"
		fi
		printf "Warning: There seem to be draft CSS rules in local.css!\n" 1>&2
	fi

	grep --extended-regexp --no-filename --only-matching "<abbr[^<]+>" "${srcDir}/src/epub/text/"* | sed 's/<abbr class=\"//g' | sed 's/<abbr xml:lang="//g' | sed 's/">//g' | sed --regexp-extended "s/\s+/\n/g" | sort | uniq | while read class;
	do
		if [ "${class}" = "name" -o "${class}" = "era" -o "${class}" = "degree" -o "${class}" = "initiialism" -o "${class}" = "acronym" -o "${class}" = "temperature" -o "${class}" = "postal" -o "${class}" = "timezone" ]; then
			grep --quiet "abbr\.${class}" "${srcDir}/src/epub/css/local.css"
			if [ $? -ne 0 ]; then
				if [ "${verbose}" = "true" ]; then
					printf "\t"
				fi
				printf "Warning: There seem to be an <abbr class=\"${class}\"> tag, but no abbr.${class} styling!\n" 1>&2
			fi
		fi
	done
done
