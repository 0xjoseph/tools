#!/usr/bin/env python3

import argparse
import string
import re
import glob
import sys
import os
import fnmatch
from bs4 import BeautifulSoup
import unicodedata

ignoredFiles = ["colophon.xhtml", "titlepage.xhtml", "imprint.xhtml", "uncopyright.xhtml", "halftitle.xhtml", "toc.xhtml", "loi.xhtml"]
includedCharacters = list(string.whitespace) + list(string.digits) + [":",";",".","?","!"]

def word_count(text):
	return len(text.split())

def syllable_count(word):
	#see http://eayd.in/?p=232
	exception_add = ['serious','crucial']
	exception_del = ['fortunately','unfortunately']

	co_one = ['cool','coach','coat','coal','count','coin','coarse','coup','coif','cook','coign','coiffe','coof','court']
	co_two = ['coapt','coed','coinci']

	pre_one = ['preach']

	syls = 0 #added syllable number
	disc = 0 #discarded syllable number

	#1) if letters < 3 : return 1
	if len(word) <= 3 :
		syls = 1
		return syls

	#2) if doesn't end with "ted" or "tes" or "ses" or "ied" or "ies", discard "es" and "ed" at the end.
	# if it has only 1 vowel or 1 set of consecutive vowels, discard. (like "speed", "fled" etc.)

	if word[-2:] == "es" or word[-2:] == "ed" :
		doubleAndtripple_1 = len(re.findall(r'[eaoui][eaoui]',word))
		if doubleAndtripple_1 > 1 or len(re.findall(r'[eaoui][^eaoui]',word)) > 1 :
			if word[-3:] == "ted" or word[-3:] == "tes" or word[-3:] == "ses" or word[-3:] == "ied" or word[-3:] == "ies" :
				pass
			else :
				disc+=1

	#3) discard trailing "e", except where ending is "le"

	le_except = ['whole','mobile','pole','male','female','hale','pale','tale','sale','aisle','whale','while']

	if word[-1:] == "e" :
		if word[-2:] == "le" and word not in le_except :
			pass

		else :
			disc+=1

	#4) check if consecutive vowels exists, triplets or pairs, count them as one.

	doubleAndtripple = len(re.findall(r'[eaoui][eaoui]',word))
	tripple = len(re.findall(r'[eaoui][eaoui][eaoui]',word))
	disc+=doubleAndtripple + tripple

	#5) count remaining vowels in word.
	numVowels = len(re.findall(r'[eaoui]',word))

	#6) add one if starts with "mc"
	if word[:2] == "mc" :
		syls+=1

	#7) add one if ends with "y" but is not surrouned by vowel
	if word[-1:] == "y" and word[-2] not in "aeoui" :
		syls +=1

	#8) add one if "y" is surrounded by non-vowels and is not in the last word.

	for i,j in enumerate(word) :
		if j == "y" :
			if (i != 0) and (i != len(word)-1) :
				if word[i-1] not in "aeoui" and word[i+1] not in "aeoui" :
					syls+=1

	#9) if starts with "tri-" or "bi-" and is followed by a vowel, add one.

	if word[:3] == "tri" and word[3] in "aeoui" :
		syls+=1

	if word[:2] == "bi" and word[2] in "aeoui" :
		syls+=1

	#10) if ends with "-ian", should be counted as two syllables, except for "-tian" and "-cian"

	if word[-3:] == "ian" :
	#and (word[-4:] != "cian" or word[-4:] != "tian") :
		if word[-4:] == "cian" or word[-4:] == "tian" :
			pass
		else :
			syls+=1

	#11) if starts with "co-" and is followed by a vowel, check if exists in the double syllable dictionary, if not, check if in single dictionary and act accordingly.

	if word[:2] == "co" and word[2] in 'eaoui' :

		if word[:4] in co_two or word[:5] in co_two or word[:6] in co_two :
			syls+=1
		elif word[:4] in co_one or word[:5] in co_one or word[:6] in co_one :
			pass
		else :
			syls+=1

	#12) if starts with "pre-" and is followed by a vowel, check if exists in the double syllable dictionary, if not, check if in single dictionary and act accordingly.

	if word[:3] == "pre" and word[3] in 'eaoui' :
		if word[:6] in pre_one :
			pass
		else :
			syls+=1

	#13) check for "-n't" and cross match with dictionary to add syllable.

	negative = ["doesn't", "isn't", "shouldn't", "couldn't","wouldn't"]

	if word[-3:] == "n't" :
		if word in negative :
			syls+=1
		else :
			pass

	#14) Handling the exceptional words.

	if word in exception_del :
		disc+=1

	if word in exception_add :
		syls+=1

	# calculate the output
	return numVowels - disc + syls

def main():
	parser = argparse.ArgumentParser(description="Calculate the Flesch reading ease for a Standard Ebooks source directory.")
	parser.add_argument("-v", "--verbose", help="Increase output verbosity", action="store_true")
	parser.add_argument('directories', metavar='DIRECTORY', nargs='+', help='A Standard Ebooks source directory')
	args = parser.parse_args()

	#First test if we're looking at a Standard Ebooks source directory
	for directory in args.directories:
		directory = os.path.abspath(directory)
		if not os.path.isdir(os.path.join(directory, "src/")):
			print(directory + " doesn't look like a Standard Ebook source directory.", file=sys.stderr)
			exit(1)

	#Calculate!
	for directory in args.directories:
		directory = os.path.abspath(directory)
		source_dir = os.path.join(directory, "src/")

		if args.verbose:
			print("Checking " + directory + " ...")

		text = ""

		for root, dirnames, filenames in os.walk(source_dir):
			for filename in fnmatch.filter(filenames, '*.xhtml'):
				if filename not in ignoredFiles:
					fh = open(os.path.join(root, filename), "r")
					text += BeautifulSoup(fh.read(), "lxml").body.get_text() + " "
					fh.close()

		#Remove non-sentence-ending punctuation from source text
		processedText = re.sub(r"[—–\n]", " ", text.lower())
		processedText = "".join(c for c in processedText if c.isalpha() or c in includedCharacters).strip()

		#Remove accents
		processedText = "".join(c for c in unicodedata.normalize('NFD', processedText) if unicodedata.category(c) != 'Mn')

		#Get word count
		wordCount = word_count(processedText)
		if wordCount <= 0:
			wordCount = 1

		#Get average sentence length
		ignoreCount = 0
		sentences = re.split(r' *[\.\?!][\'"\)\]]* *', processedText)
		for sentence in sentences:
			if word_count(sentence) <= 2:
				ignoreCount = ignoreCount + 1
		sentenceCount = len(sentences) - ignoreCount

		if sentenceCount <= 0:
			sentenceCount = 1

		averageSentenceLength = round(float(wordCount) / float(sentenceCount), 1)

		#Get average syllables per word
		syllableCount = 0
		for word in processedText.split():
			syllableCount += syllable_count(word)

		averageSyllablesPerWord = round(float(syllableCount) / float(wordCount), 1)

		fleschReadingEase = round(206.835 - float(1.015 * averageSentenceLength) - float(84.6 * averageSyllablesPerWord), 2)

		if args.verbose:
			print("\t" + str(fleschReadingEase))
		else:
			print(fleschReadingEase)

if __name__ == "__main__":
	main()
